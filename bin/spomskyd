#!/usr/bin/env ruby
# vim: noet


begin

	# if this file is a symlink (which is probably is, since rubygems
	# symlinks bin files into /usr/bin), find the original source file
	this_file = File.symlink?(__FILE__) ? \
		File.readlink(__FILE__) : __FILE__

	# try loading the lib via a relative path
	# first, in case we're running on the trunk
	require (dev_path = File.expand_path(
		File.dirname(this_file) + "/../lib/spomskyd.rb"))
	
rescue LoadError
	begin
	
		# couldn't load via relative
		# path, so try loading the gem
		require "rubygems"
		require "spomskyd"
		
	rescue LoadError

		# nothing worked, so re-raise
		# with more useful information
		raise LoadError.new(
			"Couldn't load spomskyd.rb relatively (from " +\
			"#{dev_path.inspect}) or via RubyGems")
	end
end


# load option parser
# from the ruby stdlib
require "optparse"
options = {}

# parse the command-line options
OptionParser.new do |opts|
	options[:backend] = "HTTP"
	options[:port] = 8100
	
	# display summary usage info
	opts.banner = "Usage:\n" +\
	              "    spomskyd [OPTIONS] [ARGUMENTS]"
  opts.separator " "
  opts.separator "Options:"
	
	# parse the BACKEND option
	opts.on("-b", "--backend=BACKEND", "Start a RubySMS backend of the given type (default=HTTP)") do |b|
		options[:backend] = b
	end

	# parse the PORT option
	opts.on("-p", "--port=PORT", Integer, "Listen on a given TCP port (default=8100)") do |p|
		options[:port] = p
	end
	
	# print usage information
	opts.on_tail("-h", "--help", "Show this message") do
		puts opts
		exit
	end
end.parse!


# create a router with a single spomsky app. we
# deliberately only support a single spomsky per
# process, to keep the command-line args simple
app = SpomskyApp.new(options[:port])
router = SMS::Router.new
router.add_app(app)

# pass the remaining (non option) arguments
# from the command line directly to 
router.add_backend(options[:backend], *ARGV)
router.serve_forever
